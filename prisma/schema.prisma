// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email String   @unique
  login String   @unique
  password String   @unique
  acessTokenLastSerial Int   @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  historyProductsUser  HistoryProductsUser[]
  refreshToken         RefreshToken[]
  shopCartUser         shopCartUser[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt @map("updated-at")
  createdAt DateTime @default(now()) @map("created-at")
  token     String   @unique
  expDate   DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
}

model Category {
  id        String   @id @default(uuid())
  name String   @unique
  products      Product[]
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  title     String
  article     String
  priceDef     Int
  priceNDS     Int
  inStock     Int
  min       Int
  max       Int
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String   @map("category_id")
  properties      Properties[]
  ImgUrls  ProductImage[]
  historyProductsUser  HistoryProductsUser[]
  shopCartUser         shopCartUser[]
}

model ProductImage  {
  id        String   @id @default(uuid())
  url     String
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @map("product_id")
}
model Properties  {
  id        String   @id @default(uuid())
  key     String
  value     String
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @map("product_id")
}

model shopCartUser  {
  id        String   @id @default(uuid())
  count Int
 
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @map("product_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
}

model HistoryProductsUser  {
  id        String   @id @default(uuid())
 
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @map("product_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
}